@charset "UTF-8"

//* 2. Grid Mixin
//* @mixin blockEqualWidth  		   line: 23   =Equal Width block elements up to 6 in a row
//* @mixin blockEqualWidthWithMargin   line: 35   =Equal Width block elements up to 6 in a row with margin
//* @mixin blockEqualPercent($margin: 1%, $alpha: false, $omega: false, $totalWidth: 100%, $height: 160, $selector: li, $defaultUnit: "%")
//* @mixin multiRowPercent($grid: 2, $margin: 1%, $margin-bottom: $margin, $totalWidth: 100%, $height: 40, $selector: li, $parent: ul, $defaultUnit: "%")
//* @mixin multiRowBlockEqualWidth	   line: 	  =Spread into multiple row, maintain the same width, great for repeatable el
//* @mixin column     		  		   line: 45   =960.gs based Grid System, swtich between 12, 16, 24 cols, add column(s)
//* @mixin push     		  		   line: 45   =960.gs based, add margin-left value, push element to the right
//* @mixin pull     		  		   line: 45   =960.gs based, add margin-right value, push element to the left
//
//* 1. Grid: Fully Customized Fixed Grid
//* 2. Grid: Block Equal Width
//* 3. Grid: Block Equal Width With Margin (px)
//* 4. Grid: Block Equal Width With Margin (%)
//* 5. Grid: Multiple Row Block with equal Percent width grids
//* 6. Grid: Multiple Row Block with equal width grids
//* 1. Grid: Responsive Grid
//* 2. Grid: Block Grid

// ======================================================
// = 1. Grid: Fully Customized Fixed Grid
// Custom Grid System: Fixed Width
// Based on Full Width: 960px  ( Pixel || Percentage ) Support
// ======================================================

// DO NOT MODIFIED THE VALUE BELOW, SETUP DEFAULT VALUE
$grid_columns: 0
$grid_column_width: 0
$gutter_column_width: 0

@mixin setupFixedGridVariable
	@each $cols, $col-width-px, $gutter-width-px, $col-width-percent, $gutter-width-percent  in $flex_grid_measure_map
		@if $flex_grid_columns == $cols
			$grid_columns: $cols
			@if $flex_grid_measurement == px
				$grid_column_width: $col-width-px
				$gutter_column_width: $gutter-width-px
			@else
				$grid_column_width: $col-width-percent
				$gutter_column_width: $gutter-width-percent

+setupFixedGridVariable

// Utility function â€” you should never need to modify this
@function gridsystem-width($cols: $grid_columns, $col-width: $grid_column_width, $gap: $gutter_column_width )
	@return ($col-width * $cols) + ($gap * $cols)

$total-width: gridsystem-width($grid_columns, $grid_column_width, $gutter_column_width)

@mixin column($col, $alpha: false, $omega: false, $grid_columns: $grid_columns, $col-width: $grid_column_width, $gap: $gutter_column_width, $side: left)
	display: inline
	float: $side
	width: $total-width*(((( $gap + $col-width )*$col) - $gap ) / gridsystem-width($grid_columns, $col-width, $gap))
	margin: 0 $total-width*(( $gap *.5)/gridsystem-width($grid_columns, $col-width, $gap))
	@if $alpha == true // first columns
		margin-left: 0
	@if $omega == true // last columns
		margin-right: 0
	// *width: $total-width*(((( $gap + $col-width )*$col)- $gap ) / gridsystem-width($grid_columns, $col-width, $gap))-$correction
	// *margin: 0 $total-width*(( $gap *.5)/gridsystem-width($grid_columns, $col-width, $gap))-$correction


@mixin push($offset: 1, $marginOrPadding: margin, $grid_columns: $grid_columns, $col-width: $grid_column_width, $gap: $gutter_column_width)
	@if $marginOrPadding == margin or $marginOrPadding == m
		margin-left: $total-width*((( $gap + $col-width)*$offset) / gridsystem-width($grid_columns, $col-width, $gap)) + $total-width*(( $gap *.5)/gridsystem-width($grid_columns, $col-width, $gap))
	@if $marginOrPadding == padding or $marginOrPadding == p
		padding-left: $total-width*((( $gap + $col-width)*$offset) / gridsystem-width($grid_columns, $col-width, $gap)) + $total-width*(( $gap *.5)/gridsystem-width($grid_columns, $col-width, $gap)) - $gap / 2


@mixin pull($offset: 1, $marginOrPadding: margin, $grid_columns: $grid_columns, $col-width: $grid_column_width, $gap: $gutter_column_width)
	@if $marginOrPadding == margin or $marginOrPadding == m
		margin-right: $total-width*((($gap+ $col-width)*$offset) / gridsystem-width($grid_columns, $col-width, $gap)) + $total-width*(($gap*.5)/gridsystem-width($grid_columns, $col-width, $gap))
	@if $marginOrPadding == padding or $marginOrPadding == p
		padding-right: $total-width*((($gap+ $col-width)*$offset) / gridsystem-width($grid_columns, $col-width, $gap)) + $total-width*(($gap*.5)/gridsystem-width($grid_columns, $col-width, $gap)) - $gap / 2


@mixin table-col($span: 1, $grid_columns: $grid_columns, $col-width: $grid_column_width, $gap: 0)
	width: $total-width*((($gap+ $col-width)*$span) / gridsystem-width($grid_columns, $col-width, $gap)) + $total-width*(($gap*.5)/gridsystem-width($grid_columns, $col-width, $gap))

// ======================================================
// = 2. Grid: Block Equal Width
// Selector could be any block element
// Styling children CSS3. target the first element, then sibling selector. Make equal width.
// ======================================================
@mixin blockEqualWidth($selector: li)
	#{$selector}
		float: left
		margin: 0
		padding: 0

	@for $i from 1 through 8
		@if $i == 1
			#{$selector}:first-child:nth-last-child( #{$i} )
				width: 100%
		@else
			#{$selector}:first-child:nth-last-child( #{$i} ),
			#{$selector}:first-child:nth-last-child( #{$i} ) ~ #{$selector}
				width: 100% / $i


// ======================================================
// = 3. Grid: Block Equal Width With Margin (px)
// Selector could be any block element, Only support PX
// Same as above, but with margin applied; Margin value would be Pixel based with px
// ======================================================
@mixin blockEqualWidthWithMargin($margin: 5px, $alpha: false, $omega: false, $totalWidth: 960, $height: 160, $selector: li, $dividerWidth: 0, $dividerColor: rgb(255,0,0), $defaultUnit: px)
	#{$selector}
		float: left
		position: relative
		padding: 0
		+height($height, $defaultUnit)
		&:after
			content: ""
			+box($dividerWidth, $height * 0.8)
			+bcolor($dividerColor)
			+position(absolute, ($height * 0.2) / 2, -$margin, right)
		&:last-child:after
			display: none

		@if $alpha == false
			&:first-child
				+margin(left, $margin, $defaultUnit)
		@else
			&:first-child
				margin-left: 0 !important

		@if $omega == false
			&:last-child
				+margin(right, $margin, $defaultUnit)
		@else
			&:last-child
				margin-right: 0 !important

		&:first-child:nth-last-child(1)
			margin: 0
			@if $alpha != $omega
				+width( $totalWidth - $margin )
				@if $alpha == true
					&:first-child
						+margin(left, $margin, $defaultUnit)
				@if $omega == true
					&:last-child
						+margin(right, $margin, $defaultUnit)
			@else if $alpha == false and $omega == false
				+width( $totalWidth - ( $margin*2) )
				+margin(left, $margin, $defaultUnit)
				+margin(right, $margin, $defaultUnit)
			@else if $alpha == true and $omega == true
				+width( $totalWidth )

	@for $i from 2 through 8
		#{$selector}:first-child:nth-last-child( #{$i} ),
		#{$selector}:first-child:nth-last-child( #{$i} ) ~ #{$selector}
			@if $alpha != $omega
				+width( ( ($totalWidth - ($margin * ($i * 2 - 1) )) / $i ) )
			@else if $alpha == false and $omega == false
				+width( ( ($totalWidth - ($margin * ($i * 2) )) / $i ) )
			@else if $alpha == true and $omega == true
				+width( ( ($totalWidth - ($margin * ($i * 2 - 2) )) / $i ) )
			+margin(left, $margin, $defaultUnit)
			+margin(right, $margin, $defaultUnit)


// ======================================================
// = 4. Grid: Block Equal Width With Margin (%)
// Selector could be any block element. Only Support %
// Same as above, but with margin applied; Margin value would be Pixel based with px
// ======================================================
@mixin blockEqualPercent($margin: 1%, $alpha: false, $omega: false, $totalWidth: 100%, $height: 160, $selector: li, $defaultUnit: "%")
	#{$selector}
		float: left
		position: relative
		padding: 0
		+height($height, px)

		@if $alpha == false
			&:first-child
				+margin(left, $margin, $defaultUnit)
		@else
			&:first-child
				margin-left: 0 !important

		@if $omega == false
			&:last-child
				+margin(right, $margin, $defaultUnit)
		@else
			&:last-child
				margin-right: 0 !important

	#{$selector}:first-child:nth-last-child(1)
		margin: 0
		@if $alpha != $omega
			+width( $totalWidth - $margin )
			@if $alpha == true
				&:first-child
					+margin(left, $margin, $defaultUnit)
			@if $omega == true
				&:last-child
					+margin(right, $margin, $defaultUnit)
		@else if $alpha == false and $omega == false
			+width( $totalWidth - ( $margin*2) )
			+margin(left, $margin, $defaultUnit)
			+margin(right, $margin, $defaultUnit)
		@else if $alpha == true and $omega == true
			+width( $totalWidth )

	@for $n from 2 through 8
		#{$selector}:first-child:nth-last-child(#{$n}),
		#{$selector}:first-child:nth-last-child(#{$n}) ~ #{$selector}
			@if $alpha != $omega
				+width(  ( ($totalWidth - ($margin * ($n * 2 - 1 ) )) / $n ) )
			@else if $alpha == false and $omega == false
				+width(  ( ($totalWidth - ($margin * ($n * 2 ) )) / $n ) )
			@else if $alpha == true and $omega == true
				+width(  ( ($totalWidth - ($margin * ($n * 2 - 2 ) )) / $n ) )
			+margin(left, $margin, $defaultUnit)
			+margin(right, $margin, $defaultUnit)


// ======================================================
// = 5. Grid: Multiple Row Block with equal Percent width grids
// Support $grid-unit number in one Row, suited for repeating blocks of content
// Usage: <div class="block-grid"><ul><li>Three-up element</li> <li>Three-up element</li> <li>Three-up element</li> </ul> </div>
// Note: .block-grid // Need to apply in the div level, because the $parent is ul element
//			+multiRowPercent($grid: Number)
// ======================================================
@mixin multiRowPercent($grid: 2, $margin: 1%, $margin-bottom: $margin, $totalWidth: 100%, $height: 40, $selector: li, $parent: ul, $defaultUnit: "%")

	#{$parent}
		display: block
		overflow: hidden

		#{$selector}
			display: block
			+height($height)
			float: left

			@for $n from 1 through 10
				@if $grid == $n
					@if $margin == 0
						width: $totalWidth / $n
					@else
						$width: ( $totalWidth - ( $margin * ( $n - 1 ) ) ) / $n
						width: $width
						+margin(right, $margin, $defaultUnit)
						+margin(bottom, $margin-bottom, $defaultUnit)
						&:nth-child(#{$n}n)
							margin-right: 0


// ======================================================
// = 6. Grid: Multiple Row Block with equal width grids
// Support 2 through 8  in one Row, suited for repeating blocks of content
// For IE7/8 compatibility block-grid items need to be the same height.
// Usage: <div class="block-grid"><ul><li>Three-up element</li> <li>Three-up element</li> <li>Three-up element</li> </ul> </div>
// Note: .block-grid // Need to apply in the div level, because the $parent is ul element
//			+multiRowBlockEqualWidth(3,60)
// ======================================================
@mixin multiRowBlockEqualWidth($grid: 2, $height: auto, $gutter: false, $selector: li, $parent: ul)
	#{$parent}
		display: block
		overflow: hidden

		#{$selector}
			display: block
			+height($height)
			float: left

		$_end_val: 8
		@for $i from 2 through $_end_val
			@if $grid == $i
				$_gutter_val: percentage($_end_val / $i / 100 )
				@if $gutter == true
					#{$selector}
						width: 100% / $i
				@if $gutter == false
					margin-left: -$_gutter_val
					#{$selector}
						margin-left: $_gutter_val
						width: (100% / $i) - $_gutter_val
						//&:nth-child(2n+1)
							//clear: left

// ======================================================
// = 1. Grid: Responsive Grid
// Based on Foundation v5.2.1
// https://github.com/zurb/foundation
// docs: http://foundation.zurb.com/docs/components/grid.html
// ======================================================

// Grid Functions: @FUNCTION
// $colNumber - Found in settings file
// $totalColumns - Found in settings file
@function grid-calc($colNumber, $totalColumns)
	@return percentage($colNumber / $totalColumns)

// @mixins For creating container, nested, and collapsed rows.
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
@mixin grid-row($behavior: false)
	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest
		width: auto
		margin-#{$default-float}: -($column-gutter / 2)
		margin-#{$opposite-direction}: -($column-gutter / 2)
		margin-top: 0
		margin-bottom: 0
		max-width: none
	@else if $behavior == collapse
		width: 100%
		margin: 0
		max-width: $row-width
	@else if $behavior == nest-collapse
		width: auto
		margin: 0
		max-width: none
	@else
		width: 100%
		margin-#{$default-float}: auto
		margin-#{$opposite-direction}: auto
		margin-top: 0
		margin-bottom: 0
		max-width: $row-width
	// Clearfix for all rows
	+clearfix

// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.

@mixin grid-column($columns: false, $last-column: false, $center: false, $offset: false, $push: false, $pull: false, $collapse: false, $float: true, $position: false)
	// If positioned for default .column, include relative position
	// push and pull require position set
	@if $position or $push or $pull
		position: relative
	// If collapsed, get rid of gutter padding
	@if $collapse
		padding-left: 0
		padding-right: 0
	@else if $collapse == false
		padding-left: $column-gutter / 2
		padding-right: $column-gutter / 2
	// If a column number is given, calculate width
	@if $columns
		width: grid-calc($columns, $total-columns)
		// If last column, float naturally instead of to the right
		@if $last-column
			float: $opposite-direction
	// Source Ordering, adds left/right depending on which you use.
	@if $push
		#{$default-float}: grid-calc($push, $total-columns)
		#{$opposite-direction}: auto
	@if $pull
		#{$opposite-direction}: grid-calc($pull, $total-columns)
		#{$default-float}: auto
	@if $float
		@if $float == left or $float == true
			float: $default-float
		@else if $float == right
			float: $opposite-direction
		@else
			float: none
	// If centered, get rid of float and add appropriate margins
	@if $center
		margin-#{$default-float}: auto
		margin-#{$opposite-direction}: auto
		float: none
	// If offset, calculate appropriate margins
	@if $offset
		margin-#{$default-float}: grid-calc($offset, $total-columns) !important

// Create presentational classes for grid
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
@mixin grid-html-classes($size)
	@for $i from 0 through $total-columns - 1
		.#{$size}-push-#{$i}
			+grid-column($push: $i, $collapse: null, $float: false)
		.#{$size}-pull-#{$i}
			+grid-column($pull: $i, $collapse: null, $float: false)
	.column,
	.columns
		+grid-column($columns: false, $position: true)
	@for $i from 1 through $total-columns
		.#{$size}-#{$i}
			+grid-column($columns: $i, $collapse: null, $float: false)
	[class*="column"] + [class*="column"]:last-child
		float: $opposite-direction
	[class*="column"] + [class*="column"].end
		float: $default-float
	@for $i from 0 through $total-columns - 1
		.#{$size}-offset-#{$i}
			+grid-column($offset: $i, $collapse: null, $float: false)
	.#{$size}-reset-order,
	.#{$size}-reset-order
		margin-#{$default-float}: 0
		margin-#{$opposite-direction}: 0
		left: auto
		right: auto
		float: $default-float
	.column.#{$size}-centered,
	.columns.#{$size}-centered
		+grid-column($center: true, $collapse: null, $float: false)
	.column.#{$size}-uncentered,
	.columns.#{$size}-uncentered
		margin-#{$default-float}: 0
		margin-#{$opposite-direction}: 0
		float: $default-float !important
	.column.#{$size}-uncentered.opposite,
	.columns.#{$size}-uncentered.opposite
		float: $opposite-direction

@if $include-html-grid-classes and $RWD-grid-global-show
	.row
		+grid-row
		@extend %setBoxSizing
		&.collapse
			> .column,
			> .columns
				+grid-column($collapse: true, $float: false)
			.row
				margin-left: 0
				margin-right: 0
		.row
			+grid-row($behavior: nest)
			&.collapse
				+grid-row($behavior: nest-collapse)

	.column, .columns
		+grid-column($columns: $total-columns)

	@media #{$small-up}
		+grid-html-classes($size: small)
	@media #{$medium-up}
		+grid-html-classes($size: medium)
		// Old push and pull classes
		@for $i from 0 through $total-columns - 1
			.push-#{$i}
				+grid-column($push: $i, $collapse: null, $float: false)
			.pull-#{$i}
				+grid-column($pull: $i, $collapse: null, $float: false)
	@media #{$large-up}
		+grid-html-classes($size: large)
		@for $i from 0 through $total-columns - 1
			.push-#{$i}
				+grid-column($push: $i, $collapse: null, $float: false)
			.pull-#{$i}
				+grid-column($pull: $i, $collapse: null, $float: false)
	@if $include-xl-html-block-grid-classes and $RWD-grid-global-show
		@media #{$xlarge-up}
			+grid-html-classes($size: xlarge)
		@media #{$xxlarge-up}
			+grid-html-classes($size: xxlarge)

// ======================================================
// = 2. Grid: Block Grid
// Based on Foundation v5.2.1
// https://github.com/zurb/foundation
// docs: http://foundation.zurb.com/docs/components/block_grid.html
// ======================================================

@if $align-block-grid-to-grid
	$block-grid-default-spacing: $column-gutter

// Create a custom block grid
//
// $per-row - # of items to display per row. Default: false.
// $spacing - # of ems to use as padding on each block item. Default: rem-calc(20).
// $base-style - Apply a base style to block grid. Default: true.
//
@mixin block-grid($per-row: false, $spacing: $block-grid-default-spacing, $include-spacing: true, $base-style: true)
	@if $base-style
		display: block
		padding: 0
		@if $align-block-grid-to-grid
			margin: 0
		@else
			margin: 0 -$spacing / 2
		+clearfix
		& > li
			display: block
			height: auto
			float: $default-float
			@if $include-spacing
				padding: 0 $spacing / 2 $spacing
	@if $per-row
		& > li
			width: 100% / $per-row
			@if $include-spacing
				padding: 0 $spacing / 2 $spacing
			list-style: none
			&:nth-of-type(n)
				clear: none
			&:nth-of-type(#{$per-row}n+1)
				clear: both
			@if $align-block-grid-to-grid
				+block-grid-aligned($per-row, $spacing)

@mixin block-grid-aligned($per-row, $spacing)
	@for $i from 1 through $block-grid-elements
		@if $per-row >= $i
			$grid-column: "+" + $i
			@if $per-row == $i
				$grid-column: ""
			&:nth-of-type(#{$per-row}n#{unquote($grid-column)})
				padding-left: $spacing - $spacing / $per-row * ($per-row - ($i - 1))
				padding-right: $spacing - $spacing / $per-row * $i

// Generate presentational markup for block grid.
//
// $size - Name of class to use, i.e. "large" will generate .large-block-grid-1, .large-block-grid-2, etc.
@mixin block-grid-html-classes($size, $include-spacing)
	@for $i from 1 through $block-grid-elements
		.#{$size}-block-grid-#{$i}
			+block-grid($i, $block-grid-default-spacing, $include-spacing, false)

@if $include-html-grid-classes and $RWD-grid-global-show
	[class*="block-grid-"]
		+block-grid
		@extend %setBoxSizing
	@if $block-grid-media-queries and $RWD-grid-global-show
		@media #{$small-up}
			+block-grid-html-classes($size: small, $include_spacing: false)
		@media #{$medium-up}
			+block-grid-html-classes($size: medium, $include_spacing: false)
		@media #{$large-up}
			+block-grid-html-classes($size: large, $include_spacing: false)
		@if $include-xl-html-block-grid-classes and $RWD-grid-global-show
			@media #{$xlarge-up}
				+block-grid-html-classes($size: xlarge, $include_spacing: false)
			@media #{$xxlarge-up}
				+block-grid-html-classes($size: xxlarge, $include_spacing: false)
